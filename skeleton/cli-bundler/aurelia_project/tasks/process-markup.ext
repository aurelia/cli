import {build} from 'aurelia-cli';
// @if feat.babel
import gulp from 'gulp';
import project from '../aurelia.json';
// @if feat['htmlmin-min'] || feat['htmlmin-max']
import htmlmin from 'gulp-htmlmin';
import plumber from 'gulp-plumber';
import notify from 'gulp-notify';
// @endif
// @endif
// @if feat.typescript
import * as gulp from 'gulp';
import * as project from '../aurelia.json';
// @if feat['htmlmin-min'] || feat['htmlmin-max']
import * as htmlmin from 'gulp-htmlmin';
import * as plumber from 'gulp-plumber';
import * as notify from 'gulp-notify';
// @endif
// @endif
// @if feat.plugin
import { processMarkupAliases } from './process-markup-aliases';
// @endif

export default function processMarkup() {
  return gulp.src(project.markupProcessor.source, {sourcemaps: true, since: gulp.lastRun(processMarkup)})
    // @if feat['htmlmin-min'] || feat['htmlmin-max']
    .pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))
    .pipe(htmlmin({
        // @if feat['htmlmin-max']
        collapseInlineTagWhitespace: true,
        collapseBooleanAttributes: true,
        removeAttributeQuotes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        // @endif
        removeComments: true,
        collapseWhitespace: true,
        minifyCSS: true,
        minifyJS: true,
        ignoreCustomFragments: [/\${.*?}/g] // ignore interpolation expressions
    }))
    // @endif
    .pipe(build.bundle());
}

// @if feat.plugin
export function pluginMarkup(dest, runProcessMarkupAliases = false, verbose = false) {
  return function processPluginMarkup() {
    let stream = gulp.src(project.plugin.source.html);

        if (runProcessMarkupAliases) {
            stream = stream.pipe(processMarkupAliases(verbose));
        }

        stream = stream
            // @if feat['htmlmin-min'] || feat['htmlmin-max']
            .pipe(
                htmlmin({
                    collapseInlineTagWhitespace: true,
                    collapseBooleanAttributes: true,
                    removeAttributeQuotes: true,
                    removeScriptTypeAttributes: true,
                    removeStyleLinkTypeAttributes: true,
                    removeComments: true,
                    collapseWhitespace: true,
                    minifyCSS: true,
                    minifyJS: true,
                    ignoreCustomFragments: [/\${.*?}/g], // ignore interpolation expressions
                })
            )
            // @endif
            .pipe(gulp.dest(dest));

        return stream;
  };
}
// @endif
